ggplot(., aes(x = countLog, y = response, color = proficiency)) +
geom_jitter(height = 0.04, width = 0.2, alpha = 0.5) +
geom_smooth(method = lm, fullrange = T) +
scale_color_brewer(palette = "Set1")
setwd("~/Dropbox/experimento")
source("../scripts/newdata_ept")
source("./scripts/newdata_ept")
source("../scripts/newdata_ept")
source("../newdata_ept")
source("../scripts/newdata_ept.R")
source("./scripts/newdata_ept.R")
source("../scripts/newdata_ept.R")
source("../scripts/newdata_ept.R")
source("./scripts/newdata_ept.R")
setwd("~/Dropbox/experimento")
source("./scripts/newdata_ept.R")
source("../scripts/newdata_ept.R")
```{r,'source_script', message=FALSE, echo=TRUE echo=TRUE}
setwd("~/Desktop/Final paper")
source("../scripts/newdata_ept.R")
source("../scripts/newdata_ept.R")
source("./scripts/newdata_ept.R")
source("../scripts/newdata_ept.R")
setwd("~/Desktop/Final paper")
source("../scripts/newdata_ept.R")
source("../scripts/eptdata.R")
library("papaja")
source("../scripts/eptdata.R")
setwd("~/Desktop/Final paper")
source("../scripts/poisson_regression.R")
setwd("~/Desktop/Final paper")
setwd("~/Desktop/Final paper/manuscript")
setwd("~/Desktop/Final paper")
```{r, 'source_libs', echo=TRUE}
source("../scripts/eptdata.R")
source("../scripts/libs.R")
source("../scripts/poisson_regression.R")
source("../scripts/libs.R")
source("../scripts/eptdata.R")
source("../scripts/libs.R")
source("../scripts/eptdata.R")
source("../scripts/libs.R")
source("../scripts/poisson_regression.R")
E}
library("papaja")
source("../scripts/libs.R")
source("../scripts/eptdata.R")
source("../scripts/eptdata.R")
setwd("~/Desktop/Final paper")
source("../scripts/eptdata.R")
source("../scripts/eptdata.R")
source("../scripts/libs.R")
source("../scripts/eptdata.R")
setwd("~/Desktop/Final paper")
source("../scripts/eptdata.R")
setwd("~/Desktop/Final paper")
source("../scripts/eptdata.R")
source("../scripts/eptdata.R")
ept_elog <- ept_df %>%
group_by(., participant, proficiency, countfreq, groupCon, response, item) %>%
summarize(., n = 8,
wDOM = sum(response),
woDOM = n - wDOM,
eLog = log((wDOM + 0.5) / (n - wDOM + 0.5)),
wts = 1 / (wDOM + 0.5) + 1 / (n - wDOM + 0.5),
countLog = log(countfreq))
source("../scripts/eptdata.R")
source("../scripts/eptdata.R")
ept_elog <- ept_df %>%
group_by(., participant, proficiency, countfreq, groupCon, response, item) %>%
summarize(., n = 8,
wDOM = sum(response),
woDOM = n - wDOM,
eLog = log((wDOM + 0.5) / (n - wDOM + 0.5)),
wts = 1 / (wDOM + 0.5) + 1 / (n - wDOM + 0.5),
countLog = log(countfreq))
ept_fig1 <- ept_elog2 %>%
ggplot(., aes(x = countLog, y = response, color = proficiency)) +
geom_jitter(height = 0.04, width = 0.2, alpha = 0.5) +
geom_smooth(method = lm, fullrange = T) +
scale_color_brewer(palette = "Set1")
ept_fig1
mod_int
summary(mod_int)
source("../scripts/ajtdata.R")
source("../scripts/ajtdata.R")
setwd("~/Desktop/Final paper")
ajt_df1 <- read_csv("../data/ajt_raw.csv") %>%
na.omit(.) %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
gramCon = recode(gram, g = 0.5, u = -0.5))
ajt_df1 <- read_csv("./data/ajt_raw.csv") %>%
na.omit(.) %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
gramCon = recode(gram, g = 0.5, u = -0.5))
source("../scripts/ajtdata.R")
source("../scripts/ajtdata.R")
source("../scripts/ajtdata.R")
ajt_df_temp <- rbind(ajt_df1, ajt_df2)
# Create vector of verb names
verbs <- c('fg1' = 'cuidar',
'fg2' = 'encontrar',
'fg3' = 'tocar',
'fg4' = 'aceptar',
'fg5' = 'medir',
'fg6' = 'parar',
'fg7' = 'llevar',
'fg8' = 'cambiar',
'fu1' = 'cuidar',
'fu2' = 'encontrar',
'fu3' = 'tocar',
'fu4' = 'aceptar',
'fu5' = 'medir',
'fu6' = 'parar',
'fu7' = 'llevar',
'fu8' = 'cambiar',
'ug1' = 'vigilar',
'ug2' = 'hallar',
'ug3' = 'acariciar',
'ug4' = 'acoger',
'ug5' = 'abrigar',
'ug6' = 'detener',
'ug7' = 'trasladar',
'ug8' = 'reemplazar',
'uu1' = 'vigilar',
'uu2' = 'hallar',
'uu3' = 'acariciar',
'uu4' = 'acoger',
'uu5' = 'abrigar',
'uu6' = 'detener',
'uu7' = 'trasladar',
'uu8' = 'reemplazar')
# append column to data frame of verb names
ajt_df_temp$verbs <- verbs[ajt_df_temp$item]
#create a columns with the raw frequency data
# do I need to include the ungrammatical ones also?
countfreq <- c('fg1' = 7531,
'fg2' = 21725 ,
'fg3' = 3861  ,
'fg4' = 4098  ,
'fg5' = 886,
'fg6' = 8174  ,
'fg7' = 107445 ,
'fg8' = 9871,
'fu1' = 7531,
'fu2' = 21725 ,
'fu3' = 3861  ,
'fu4' = 4098  ,
'fu5' = 886,
'fu6' = 8174  ,
'fu7' = 107445 ,
'fu8' = 9871,
'ug1' = 1197 ,
'ug2' = 803,
'ug3' = 427 ,
'ug4' = 2423,
'ug5' = 123 ,
'ug6' = 5912,
'ug7' = 4402,
'ug8' = 4252,
'uu1' = 1197 ,
'uu2' = 803,
'uu3' = 427 ,
'uu4' = 2423,
'uu5' = 123 ,
'uu6' = 5912,
'uu7' = 4402,
'uu8' = 4252)
ajt_df_temp$countfreq <- countfreq[ajt_df_temp$item]
ajt_df <- read_csv("./data/prof_df.csv") %>%
left_join(ajt_df_temp, ., by = 'participant')
ajt_df %>%
group_by(group, proficiency, countfreq, gram) %>%
summarize(., mean = mean(response),
sd = sd(response))
ajt_df %>%
group_by(group, proficiency, gram) %>%
summarize(., mean = mean(response),
sd = sd(response))
group_names <- c(co = "CO", hs_adv = "HS Adv.", hs_int = "HS Int.")
# judgement score as a function of group, gram and freq
ajt_elog <- ajt_df %>%
group_by(., participant, proficiency, countfreq, groupCon, response, item, verbs, gramCon, gram) %>%
summarize(., n = 8,
wDOM = sum(response),
woDOM = n - wDOM,
eLog = log((wDOM + 0.5) / (n - wDOM + 0.5)),
wts = 1 / (wDOM + 0.5) + 1 / (n - wDOM + 0.5),
countLog = log(countfreq))
ajt_elog2 <- ajt_elog %>%
filter(., item != "fg2") %>%
filter(., item != "fg7") %>%
filter(., item != "fu2") %>%
filter(., item != "fu7") %>%
filter(., item != "ug3") %>%
filter(., item != "ug5") %>%
filter(., item != "uu3") %>%
filter(., item != "uu5")
ajt_p1 <- ajt_elog2 %>%
ggplot(., aes(x = countLog, y = eLog, color = proficiency)) +
geom_point()+
geom_smooth(method =lm)+
scale_color_brewer(palette = "Set1")
ajt_p1
ajt_p1
ajt_df$verbs <- factor(ajt_elog2$verbs, levels = order)
condition_names <- c('co' = "CO", 'hs_adv' = "HS Adv.", 'hs_int' = "HS Int.",
"g" = "Grammatical", "u" = "Ungrammatical")
# plot response as a function of verbs, gram and freq for each group
ajt_p2 <- ajt_elog2 %>%
# filter(., !(participant %in% c("p03", "p13"))) %>%
ggplot(., aes(x = verbs, y = eLog, color = proficiency, dodge = proficiency)) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', position = position_dodge(1), size = 0.25) +
stat_summary(fun.y = mean, geom = 'point', position = position_dodge(1), color = 'white', size = 1.25) +
scale_color_brewer(palette = "Set1") +
labs(y = 'Mean judgement score', x = 'Verb', caption = "Mean +/- 95% CI") +
theme_grey(base_family = 'Times', base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ajt_p2
lmer_null <- lmer(response ~ 1 +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
lmer_prof <- lmer(response ~ proficiency +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
anova(lmer_null, lmer_prof, test = 'Chisq')
lmer_gram <- lmer(response ~ proficiency + gramCon +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
anova(lmer_prof, lmer_gram, test = 'Chisq')
lmer_freq <- lmer(response ~ proficiency + gramCon + countLog +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
anova(lmer_gram, lmer_freq, test = 'Chisq')
lmer_prof_gram <- lmer(response ~ proficiency + gramCon + countLog +
proficiency:gramCon +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
anova(lmer_freq, lmer_prof_gram, test = 'Chisq') # proficiency by gram interaction
lmer_prof_freq <- lmer(response ~ proficiency + gramCon + countLog +
proficiency:gramCon + proficiency:countLog +
(1 + gramCon + countLog | participant) +
(0 + gramCon + countLog | verbs),
data = ajt_elog2, REML = FALSE)
anova(lmer_prof_gram, lmer_prof_freq, test = 'Chisq')
source("../scripts/ajtdata.R")
anov <-anova(mod_nul, mod_cat, mod_con, mod_int)
mod_nul <- lm(eLog ~1, data = ept_elog2)
summary(mod_nul)
rm(list = ls(all = TRUE))
setwd("~/Desktop/Final paper")
#load package
library(tidyverse)
library(lme4)
library(lmerTest)
#load data
ept_df1 <- read_csv("./data/ept_raw.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5), #porque 0.5?
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv("./data/ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
# incorporate the df with the additional data
ept_df_temp <- rbind(ept_df1, ept_df2)
verbs <- c('f1' = 'cuidar',
'f2' = 'encontrar',
'f3' = 'tocar',
'f4' = 'aceptar',
'f5' = 'medir',
'f6' = 'parar',
'f7' = 'llevar',
'f8' = 'cambiar',
'u1' = 'vigilar',
'u2' = 'hallar',
'u3' = 'acariciar',
'u4' = 'acoger',
'u5' = 'abrigar',
'u6' = 'detener',
'u7' = 'trasladar',
'u8' = 'reemplazar')
ept_df_temp$verbs <- verbs[ept_df_temp$item]
unique(ept_df_temp$participant)
# import dele data and join with df
ept_df <- read_csv("./data/prof_df.csv") %>%
left_join(ept_df_temp, ., by = 'participant')
# the new frequency counts from the Davis corpus
countfreq <- c('f1' = 7531,
'f2' = 21725 ,
'f3' = 3861  ,
'f4' = 4098  ,
'f5' = 886,
'f6' = 8174  ,
'f7' = 107445 ,
'f8' = 9871,
'u1' = 1197 ,
'u2' = 803,
'u3' = 427 ,
'u4' = 2423,
'u5' = 123 ,
'u6' = 5912,
'u7' = 4402,
'u8' = 4252)
ept_df$countfreq <- countfreq[ept_df$item]
# added a new column in order to plot per items as a synonim pair.
#ept_df %>%
#  ggplot(., aes(x = response, y = countfreq)) +
#           geom_boxplot()
#unique(ept_df_temp$participant)
#glimpse(ept_df)
#         synonym <- c('f1' = 1 ,
#                      'f2' = 2 ,
#                      'f3' = 3 ,
#                      'f4' = 4 ,
#                      'f5' = 5 ,
#                      'f6' = 6 ,
#                      'f7' = 7 ,
#                      'f8' = 8 ,
#                      'u1' = 1 ,
#                      'u2' = 2 ,
#                      'u3' = 3 ,
#                      'u4' = 4 ,
#                      'u5' = 5 ,
#                      'u6' = 6 ,
#                      'u7' = 7 ,
#                      'u8' = 8)
#         ept_df$synonym <- synonym[ept_df$item]
# !!!! NO MORE OPENING THE FOLLOWING FILES:
# - ajt_comp_clean.csv
# - ajt_raw.csv
# - ept_comp_clean.csv
# - ept_raw.csv
# proficiency
# - create data frame (excel) with participant ID and prof label and dele (participant, prof, dele)
# - save as 'prof_df.csv' in data folder
# frequency
# - create data frame (excel) with verb (infinitive) and frequency (davis score)
# - 2 columns, verb and freq
# - save as 'freq_df.csv' in data folder
# additional participants
# - create new data frame for additional participants
# - same columns as 'ajt_raw.csv' and 'ept_raw.csv'
# - save as 'ajt_additional_data.csv' in data folder
# - save as 'ept_additional_data.csv' in data folder
#         ept_df %>%
#           group_by(., proficiency) %>%
#           summarize(.,mean_response = mean(response), sd_score = sd(response),
#                     mean_countfreq =mean(countfreq), sd_exp = sd(countfreq))
## A tibble: 3 x 5
#proficiency mean_response sd_score mean_countfreq sd_exp
#   <chr>               <dbl>    <dbl>          <dbl>  <dbl>
# 1 co                  0.996   0.0645         11446. 25369.
# 2 hs_adv              0.441   0.497          11446. 25356.
# 3 hs_int              0.144   0.352          11446. 25395.
#ept_df %>%
#  ggplot(., aes(x=log(countfreq), y=response, color = proficiency)) +
#  geom_jitter(height = 0.02, width = 0.4) +
#  geom_smooth(method = lm, se = F) +
#  facet_grid(. ~ as.factor(synonym))
ept_df %>%
ggplot(., aes(x = factor(synonym), y = response, color = proficiency, dodge = proficiency)) +
stat_summary(fun.data = mean_se, geom = 'pointrange', position = position_dodge(0.5))
ept_elog <- ept_df %>%
group_by(., participant, proficiency, countfreq, groupCon, response, item) %>%
summarize(., n = 8,
wDOM = sum(response),
woDOM = n - wDOM,
eLog = log((wDOM + 0.5) / (n - wDOM + 0.5)),
wts = 1 / (wDOM + 0.5) + 1 / (n - wDOM + 0.5),
countLog = log(countfreq))
ept_elog %>%
ggplot(., aes(x = countLog, y = response, color = proficiency)) +
geom_jitter(height = 0.04, width = 0.2, alpha = 0.5) +
geom_smooth(method = lm, fullrange = T) +
scale_color_brewer(palette = "Set1") +
theme_bw()
ept_elog2 <- ept_elog %>%
filter(., !(item %in% c("f2", 'f7', 'u3' ,'u5')))
ept_fig1 <- ept_elog2 %>%
ggplot(., aes(x = countLog, y = response, color = proficiency)) +
geom_jitter(height = 0.04, width = 0.2, alpha = 0.5) +
geom_smooth(method = lm, fullrange = T) +
scale_color_brewer(palette = "Set1")
#           filter(., countfreq!= "f2") %>%
#             filter(., countfreq!= "f7") %>%
#             filter(., countfreq!= "f8") %>%
#
#         ept_elog %>%
#           filter(., countfreq!= "f2") %>%
#           filter(., countfreq!= "f7") %>%
#           ggplot(., aes(x=countLog, y=response, color = proficiency)) +
#           geom_hline(yintercept = 0.60205, lty = 2, size = 0.25, color = "grey60") + # from fitted model below
#           geom_vline(xintercept = 0, lty = 2, size = 0.25, color = "grey60") +       # from fitted model below
#           geom_point() +
#           geom_smooth(method = lm, se = F, fullrange = T) +
#           geom_abline(intercept = 0.60205, slope = 0.67977, lty = 3)
# the plot per items
#         ept_df %>%
#           ggplot(., aes(x=countfreq, y=response, color = proficiency)) +
#           geom_abline(intercept = 0.60205, slope = 0.67977, lty = 3) +
#           geom_hline(yintercept = 0.60205, lty = 2, size = 0.25, color = "grey60") + # from fitted model below
#           geom_vline(xintercept = 0, lty = 2, size = 0.25, color = "grey60") +       # from fitted model below
#           geom_point() +
#           geom_smooth(method = lm, se = F, fullrange = T) +
#           geom_abline(intercept = 0.60205, slope = 0.67977, lty = 3) +
#           facet_wrap( ~ synonym, nrow = 3)
#Previous Nested Comparison Data from my QP
#ept_elog <- ept_df %>%
#  group_by(., participant, proficiency, countfreq, groupCon, response, item) %>%
#  summarize(., n = 8,
#            wDOM = sum(response),
#            woDOM = n - wDOM,
#            eLog = log((wDOM + 0.5) / (n - wDOM + 0.5)),
#            wts = 1 / (wDOM + 0.5) + 1 / (n - wDOM + 0.5),
#            countLog = log(countfreq))
#nested model comparison
## GOOD
mod_nul <- lm(eLog ~1, data = ept_elog2)
summary(mod_nul)
mod_cat <-lm(eLog ~ countLog, data = ept_elog2)
summary(mod_cat)
mod_con <-lm(eLog ~ countLog + proficiency, data = ept_elog2)
summary(mod_con)
mod_int <-lm(eLog ~ countLog * proficiency, data = ept_elog2)
summary(mod_int)
anov <-anova(mod_nul, mod_cat, mod_con, mod_int)
## EPT en elog sin los verbos mas y menos frecuentes y sin controles
ept_elog2_hs <- ept_elog2 %>% filter(., proficiency != 'co') %>%
mutate(., profCon = if_else(proficiency == 'hs_adv', true = 0.5, false = -0.5))
mod_nul_hs <- lm(eLog ~1, data = ept_elog2_hs)
summary(mod_nul)
mod_cat_hs <-lm(eLog ~ countLog, data = ept_elog2_hs)
summary(mod_cat)
mod_con_hs <-lm(eLog ~ countLog + proficiency, data = ept_elog2_hs)
summary(mod_con)
mod_int_hs <-lm(eLog ~ countLog * proficiency, data = ept_elog2_hs)
summary(mod_int)
anova(mod_nul_hs, mod_cat_hs, mod_con_hs, mod_int_hs)
#ept_elog2_hs %>%
#  ggplot(., aes(x = countLog, y = response, color = proficiency)) +
#  geom_point()+
#  geom_smooth(method =lm)+
#  scale_color_brewer(palette = "Set1")
#lm_full <- lmer(eLog ~ proficiency * countLog +
#                  (1 | participant),
#                data = ept_elog, weights = 1/wts,
#                control=lmerControl(optimizer="bobyqa"))
#anova(lm_null, lm_prof, lm_full, test = 'Chisq')
#summary(lm_full)
#ranef(lm_full)
#ept_elog_hs <- ept_elog %>% filter(., proficiency != 'co') %>%
# mutate(., profCon = if_else(proficiency == 'hs_adv', true = 0.5, false = -0.5))
#lm_hs <- lmer(eLog ~ countLog * profCon +
#                (1 | participant),
#              data = ept_elog_hs, weights = 1/wts,
#              control = lmerControl(optimizer = 'bobyqa'))
#summary(lm_hs)
anov1 <-anova(mod_nul, mod_cat, mod_con, mod_int)
summary(anov1)
anova(mod_nul, mod_cat, mod_con, mod_int)
anova(mod_nul, mod_cat, mod_con, mod_int)
rm(list = ls(all = TRUE))
library(here)
ept_df1 <- read_csv(here("data", "ept_raw.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5), #porque 0.5?
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
library(here)
library(tidyverse)
library(lme4)
library(lmerTest)
ept_df2 <- read_csv(here("data", "ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
library(here)
library(tidyverse)
library(lme4)
library(lmerTest)
ept_df1 <- read_csv(here("data", "ept_raw.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5), #porque 0.5?
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")
ept_df2 <- read_csv(here("data", "ept_additional_data.csv") %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")
mutate(data = ept_df2, groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")
mutate(data = ept_df2, groupCon = recode(group, co = 0.5, hs = -0.5)),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")) %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5))
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")) %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5)),
freqCon = recode(frequency, f = 0.5, u = -0.5))
ept_df2 <- read_csv(here("data", "ept_additional_data.csv")) %>%
mutate(., groupCon = recode(group, co = 0.5, hs = -0.5),
freqCon = recode(frequency, f = 0.5, u = -0.5))
